// Code generated by MockGen. DO NOT EDIT.
// Source: stack (interfaces: Stack)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_stack.go stack Stack
//

// Package mock_stack is a generated GoMock package.
package mock_stack

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStack is a mock of Stack interface.
type MockStack struct {
	ctrl     *gomock.Controller
	recorder *MockStackMockRecorder
}

// MockStackMockRecorder is the mock recorder for MockStack.
type MockStackMockRecorder struct {
	mock *MockStack
}

// NewMockStack creates a new mock instance.
func NewMockStack(ctrl *gomock.Controller) *MockStack {
	mock := &MockStack{ctrl: ctrl}
	mock.recorder = &MockStackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStack) EXPECT() *MockStackMockRecorder {
	return m.recorder
}

// Peek mocks base method.
func (m *MockStack) Peek() (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek")
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peek indicates an expected call of Peek.
func (mr *MockStackMockRecorder) Peek() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockStack)(nil).Peek))
}

// Pop mocks base method.
func (m *MockStack) Pop() (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop")
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pop indicates an expected call of Pop.
func (mr *MockStackMockRecorder) Pop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockStack)(nil).Pop))
}

// Push mocks base method.
func (m *MockStack) Push(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockStackMockRecorder) Push(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockStack)(nil).Push), arg0)
}
